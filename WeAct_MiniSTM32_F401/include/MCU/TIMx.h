#ifndef TIMx_HEADER
#define TIMx_HEADER
#include "types.h"

//-----------Comman main features between all TIMx-----------//
//
//	- 16-bit (excl. TIM2 and TIM5 are 32-bit) up, down, up/down auto-reload counter. (TIM10 and TIM11 are auto-reload 16-bit only conter.)
//	- 16-bit programmable prescaler allowing dividing (also “on the fly”) the counter clock frequency either by any factor between 1 and 65536. (Can be changed "on the fly" for TIM9 to TIM11)
//	- Up to 4 (TIM9 has 2 channels, TIM10 and TIM11 has 1 channel) independent channels for:
//       	– Input Capture
//      	– Output Compare
//      	– PWM generation (Edge (only for TIM9 To TIM11) and Center-aligned Mode)
//      	– One-pulse mode output
//
//	- Synchronization circuit to control the timer with external signals and to interconnect several timers together. (excl. TIM10 and TIM11)
//	- Interrupt/DMA(DMA excl. TIM9 to TIM11) generation on the following events:
//      	– Update: counter overflow/underflow, counter initialization (by software(SW only TIM10 and TIM11) or internal(SW or internal only for TIM9)/external trigger)
//      	– Trigger event (counter start, stop, initialization or count by internal/external(external excl. TIM9) trigger) (excl. TIM10 and TIM11)
//      	– Input capture
//      	– Output compare
//      	– Break input (Only TIM1)
//
//	- Supports incremental (quadrature) encoder and hall-sensor circuitry for positioning purposes (incl. TIM1 to TIM5 only)
//	- Trigger input for external clock or cycle-by-cycle current management (incl. TIM1 to TIM5 only)
//

//-----------TIM1 specific features-----------//
//	- Complementary outputs with programmable dead-time
//	- Repetition counter to update the timer registers only after a given number of cycles of the counter.
//	- Break input to put the timer’s output signals in reset state or in a known state.

//APB1:
#define TIM2_BASE	(0x40000000UL)
#define TIM3_BASE	(0x40000400UL)
#define TIM4_BASE	(0x40000800UL)
#define TIM5_BASE	(0x40000C00UL)

//APB2:
#define TIM1_BASE	(0x40010000UL)

#define TIM9_BASE	(0x40014000UL)

#define TIM10_BASE	(0x40014400UL)
#define TIM11_BASE	(0x40014800UL)


typedef struct {

	_IO uint32_t CR1;
#if defined (TIM9_t) || defined (TIM10_t)|| defined (TIM11_t)
	_I uint32_t __UNUSED_0;
#else
	_IO uint32_t CR2;
#endif
	_IO uint32_t SMCR;
	_IO uint32_t DIER;
	_IO uint32_t SR;
	_IO uint32_t EGR;
	_IO uint32_t CCMR1;		//Output Compare OR Input Capture Mode
#if defined (TIM19_t) || defined (TIM10_t)|| defined (TIM11_t)
	_I uint32_t __UNUSED_1;
#else
	_IO uint32_t CCMR2;		//Output Compare OR Input Capture Mode
#endif
	_IO uint32_t CCER;
#if defined (TIM2_t) || defined (TIM5_t)
	_IO uint32_t CNT;
#else
	_IO uint16_t CNT;
	_I uint16_t __UNUSED_2;
#endif
	_IO uint32_t PSC;
	_IO uint32_t ARR;
#ifdef TIM1_t
	_IO uint32_t RCR;
#else
	_IO uint32_t __UNUSED_3;
#endif
	_IO uint32_t CCR1;
#if defined (TIM10_t) || defined (TIM11_t)
	_I uint32_t __UNUSED_4[6];
#else
	_IO uint32_t CCR2;
	#if defined (TIM9_t)
	_I uint32_t __UNUSED_5[5];
	#else
		_IO uint32_t CCR3;
		_IO uint32_t CCR4;
		#ifdef TIM1
			_IO uint32_t BDTR;
		#elif defined (TIM2_t) || defined (TIM3_t) || defined (TIM4_t) || defined (TIM5_t)
			_I uint32_t __UNUSED_6;
		#endif
		_IO uint32_t DCR;
		_IO uint32_t DMAR;
	#endif
#endif
#if defined (TIM2_t) || defined (TIM5_t) || defined (TIM10_t) || defined (TIM11_t)
		_IO uint32_t OR;
#endif
} TIMx_Type;


#define TIM1_t
	#define	TIM1	((TIMx_Type*)TIM1_BASE)
#undef TIM1_t

#define TIM2_t
	#define	TIM2	((TIMx_Type*)TIM2_BASE)
#undef TIM2_t

#define TIM3_t
	#define	TIM3	((TIMx_Type*)TIM3_BASE)
#undef TIM3_t

#define TIM4_t
	#define	TIM4	((TIMx_Type*)TIM4_BASE)
#undef TIM4_t

#define TIM5_t
	#define	TIM5	((TIMx_Type*)TIM5_BASE)
#undef TIM5_t

#define TIM9_t
	#define	TIM9	((TIMx_Type*)TIM9_BASE)
#undef TIM9_t

#define TIM10_t
	#define	TIM10	((TIMx_Type*)TIM10_BASE)
#undef TIM10_t

#define TIM11_t
	#define	TIM11	((TIMx_Type*)TIM11_BASE)
#undef TIM11_t

/*-------------------Control Reg 1-------------------*/

//CEN: Counter enable
//	0: Counter disabled
//	1: Counter enabled
//Note:
//	External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software.
//	However trigger mode can set the CEN bit automatically by hardware.
#define	TIMx_CR1_CEN_POS		(0UL)
#define	TIMx_CR1_CEN_MASK		(1UL << TIMx_CR1_CEN_POS)

//UDIS: Update disable
//	This bit is set and cleared by software to enable/disable UEV event generation.
//	0: UEV enabled. The Update (UEV) event is generated by one of the following events:
//		– Counter overflow/underflow
//		– Setting the UG bit
//		– Update generation through the slave mode controller
//	Buffered registers are then loaded with their preload values.
//
//	1: UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx).
//	However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.
#define	TIMx_CR1_UDIS_POS		(1UL)
#define	TIMx_CR1_UDIS_MASK		(1UL << TIMx_CR1_UDIS_POS)

//URS: Update request source
//	This bit is set and cleared by software to select the UEV event sources.
//	0: Any of the following events generate an update interrupt or DMA request if enabled. These events can be:
//		– Counter overflow/underflow
//		– Setting the UG bit
//		– Update generation through the slave mode controller
//	
//	1: Only counter overflow/underflow generates an update interrupt or DMA request if enabled
#define	TIMx_CR1_URS_POS		(2UL)
#define	TIMx_CR1_URS_MASK		(2UL << TIMx_CR1_URS_POS)

//OPM: One pulse mode
//	0: Counter is not stopped at update event
//	1: Counter stops counting at the next update event (clearing the bit CEN)
#define	TIMx_CR1_OPM_POS		(3UL)
#define	TIMx_CR1_OPM_MASK		(1UL << TIMx_CR1_OPM_POS)

//DIR: Direction
//	0: Counter used as upcounter
//	1: Counter used as downcounter
//
//Note:
//	This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.
#define	TIMx_CR1_DIR_POS		(4UL)
#define	TIMx_CR1_DIR_MASK		(1UL << TIMx_CR1_DIR_POS)

//CMS[1:0]: Center-aligned mode selection
//	00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
//	
//	01: Center-aligned mode 1. The counter counts up and down alternatively.
//		Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down.
//	
//	10: Center-aligned mode 2. The counter counts up and down alternatively.
//		Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up.
//	
//	11: Center-aligned mode 3. The counter counts up and down alternatively.
//		Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down.
//
//Note:
//	It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1)
#define	TIMx_CR1_CMS_POS		(5UL)
#define	TIMx_CR1_CMS_MASK		(3UL << TIMx_CR1_CMS_POS)

//ARPE: Auto-reload preload enable
//	0: TIMx_ARR register is not buffered
//	1: TIMx_ARR register is buffered
#define	TIMx_CR1_ARPE_POS		(7UL)
#define	TIMx_CR1_ARPE_MASK		(1UL << TIMx_CR1_ARPE_POS)

//CKD[1:0]: Clock division
//
//This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS) used by the dead-time generators and the digital filters (ETR, TIx),
//	00: tDTS=tCK_INT
//	01: tDTS=2*tCK_INT
//	10: tDTS=4*tCK_INT
//	11: Reserved, do not program this value
#define	TIMx_CR1_CKDE_POS		(8UL)
#define	TIMx_CR1_CKDE_MASK		(1UL << TIMx_CR1_CKDE_POS)
/*---------------------------------------------------*/


#endif //TIMx_HEADER
